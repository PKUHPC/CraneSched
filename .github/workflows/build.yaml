name: Format, Build, Upload and Test

on:
  schedule:
    - cron: "0 2 * * *"
  push:
    branches:
      - master
      - release/*
  workflow_dispatch:
    inputs:
      frontend_branch:
        description: 'Branch of FrontEnd to use'
        required: true
        default: 'master'

env:
  SCRIPT_PATH: /opt/actions-runner-external/script
  CACHE_PATH: /opt/actions-runner-external/cache
  TEST_FAILED: false

jobs:

  format:
    if: github.event_name == 'pull_request' && github.event.pull_request.draft == false
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Switch to current branch
        run: |
          echo "Switching to branch: ${GITHUB_HEAD_REF}"
          git checkout "${GITHUB_HEAD_REF}"

      - name: Set up Git identity
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install latest Clang-Format
        run: |
          sudo apt-get install -y wget lsb-release
          sudo wget -O /tmp/llvm.sh https://apt.llvm.org/llvm.sh
          sudo bash /tmp/llvm.sh 20
          sudo apt update
          sudo apt-get install clang-format-20

      - name: Run clang-format and apply changes
        run: |
          git diff --name-only origin/master...HEAD | while read -r file; do
            if [[ "$file" == *.cpp || "$file" == *.h ]]; then
              clang-format-20 -i --style=file "$file"
            fi
          done
          if ! git diff --quiet; then
            git add .
            git commit -m "style: auto format with clang-format."
            git push
            echo "Commit format."
          else
            echo "No formatting changes were necessary."
          fi

  build:
    needs: format
    if: |
      (ithub.event_name == 'pull_request' && github.event.pull_request.draft == false) ||
      github.event_name == 'push' ||
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'schedule'

    runs-on: self-hosted
    defaults:
      run:
        shell: bash -leo pipefail {0}

    steps:
      # Checkout repo
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: CraneSched
          ref: ${{ github.head_ref || github.ref_name }}

      # Checkout frontend
      - name: Checkout frontend
        uses: actions/checkout@v4
        with:
          repository: PKUHPC/CraneSched-FrontEnd
          path: CraneSched-FrontEnd
          ref: ${{ inputs.frontend_branch }}

      # Pull CI Image and Prepare
      - name: Pull CI Image
        run: |
          podman pull ghcr.io/nativu5/cranedev:ci
          echo "Linking $SCRIPT_PATH to $(pwd)/script"
          ln -sfT $SCRIPT_PATH $(pwd)/script
          echo "Linking $CACHE_PATH to $(pwd)/cache"
          ln -sfT $CACHE_PATH $(pwd)/cache
          mkdir -p output
          mkdir -p log

      - name: Build in Container
        run: |
          podman run --rm \
              -v ./CraneSched:/Workspace/CraneSched \
              -v ./CraneSched-FrontEnd:/Workspace/CraneSched-FrontEnd \
              -v ./output:/Workspace/output \
              -v ./script:/Workspace/script \
              -v ./cache/ccache:/root/.ccache \
              ghcr.io/nativu5/cranedev:ci /bin/bash --login script/build.sh

      # Collect and upload artifacts
      - name: Count Artifacts
        run: |
          ARTIFACT_NAME_CRANED_DEB=$(basename $(ls output/*craned.deb))
          ARTIFACT_NAME_CRANED_RPM=$(basename $(ls output/*craned.rpm))
          ARTIFACT_NAME_CRANECTLD_DEB=$(basename $(ls output/*cranectld.deb))
          ARTIFACT_NAME_CRANECTLD_RPM=$(basename $(ls output/*cranectld.rpm))
          ARTIFACT_NAME_FRONTEND=bin
          ARTIFACT_NAME_PLUGIN=plugin
          echo "ARTIFACT_NAME_CRANED_DEB=$ARTIFACT_NAME_CRANED_DEB" >> $GITHUB_ENV
          echo "ARTIFACT_NAME_CRANED_RPM=$ARTIFACT_NAME_CRANED_RPM" >> $GITHUB_ENV
          echo "ARTIFACT_NAME_CRANECTLD_DEB=$ARTIFACT_NAME_CRANECTLD_DEB" >> $GITHUB_ENV
          echo "ARTIFACT_NAME_CRANECTLD_RPM=$ARTIFACT_NAME_CRANECTLD_RPM" >> $GITHUB_ENV
          echo "ARTIFACT_NAME_FRONTEND=$ARTIFACT_NAME_FRONTEND" >> $GITHUB_ENV
          echo "ARTIFACT_NAME_PLUGIN=$ARTIFACT_NAME_PLUGIN" >> $GITHUB_ENV

      - name: Upload craned .deb package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME_CRANED_DEB }}
          path: output/${{ env.ARTIFACT_NAME_CRANED_DEB }}
          retention-days: 14
          if-no-files-found: error

      - name: Upload craned .rpm package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME_CRANED_RPM }}
          path: output/${{ env.ARTIFACT_NAME_CRANED_RPM }}
          retention-days: 14
          if-no-files-found: error

      - name: Upload cranectld .deb package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME_CRANECTLD_DEB }}
          path: output/${{ env.ARTIFACT_NAME_CRANECTLD_DEB }}
          retention-days: 14
          if-no-files-found: error

      - name: Upload cranectld .rpm package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME_CRANECTLD_RPM }}
          path: output/${{ env.ARTIFACT_NAME_CRANECTLD_RPM }}
          retention-days: 14
          if-no-files-found: error

      - name: Upload frontend
        uses: actions/upload-artifact@v4
        with:
          name: frontend
          path: output/${{ env.ARTIFACT_NAME_FRONTEND }}
          retention-days: 14
          if-no-files-found: error

      - name: Upload plugin
        uses: actions/upload-artifact@v4
        with:
          name: plugin
          path: output/${{ env.ARTIFACT_NAME_PLUGIN }}
          retention-days: 14
          if-no-files-found: error

      # Run AutoTest
      - name: Run AutoTest
        continue-on-error: true
        run: |
          NETWORK_ID=$(podman container inspect mongodb | jq -r '.[0].NetworkSettings.Networks | keys[]')
          podman run -d --rm --name autotest \
            --privileged \
            --systemd true \
            -v /lib/modules:/lib/modules:ro \
            -v ./script:/CraneSched-AutoTest/script \
            -v ./output:/CraneSched-AutoTest/output \
            -v ./log:/CraneSched-AutoTest/log \
            --network $NETWORK_ID \
            localhost/autotest
          podman exec autotest /bin/bash --login script/run.sh || echo "TEST_FAILED=true" >> $GITHUB_ENV
          podman stop autotest

      # Upload AutoTest Results
      - name: Upload AutoTest Results
        uses: actions/upload-artifact@v4
        with:
          name: result.json
          path: output/result.json
          retention-days: 14
          if-no-files-found: error

      # Alarm if has failed cases
      - name: Alarm on test failure
        if: env.TEST_FAILED == 'true'
        run: exit 1
