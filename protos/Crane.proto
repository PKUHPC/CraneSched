/**
 * Copyright (c) 2024 Peking University and Peking University
 * Changsha Institute for Computing and Digital Economy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

syntax = "proto3";

package crane.grpc;
option go_package = "CraneFrontEnd/generated/protos";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "PublicDefs.proto";

message StepStatusChangeRequest {
  uint32 task_id = 1;
  string craned_id = 2;
  TaskStatus new_status = 3;
  uint32 exit_code = 4;
  string reason = 5;
}

message StepStatusChangeReply {
  bool ok = 1;
}

message CranedTriggerReverseConnRequest {
  string craned_id = 1;
  google.protobuf.Timestamp token = 2;
}

message ConfigureCranedRequest {
  bool ok = 1;
  map<uint32, JobToD> job_map = 2;
  map<uint32, TaskToD> job_tasks_map = 3;
  google.protobuf.Timestamp token = 4;
}

message CranedRegisterRequest {
  string craned_id = 1;
  CranedRemoteMeta remote_meta = 2;
  google.protobuf.Timestamp token = 3;
}

message CranedRegisterReply {
  bool ok = 1;
}

message QueryCranedListFromTaskIdRequest {
  uint32 task_id = 1;
}

message QueryCranedListFromTaskIdReply {
  bool ok = 1;
  string craned_list = 2;
}

message SubmitBatchTaskRequest {
  TaskToCtld task = 1;
}

message SubmitBatchTaskReply {
  bool ok = 1;
  oneof payload {
    uint32 task_id = 2;
    ErrCode code = 3;
  }
}

message SubmitBatchTasksRequest {
  TaskToCtld task = 1;
  uint32 count = 2;
}

message SubmitBatchTasksReply {
  repeated uint32 task_id_list = 1;
  repeated ErrCode code_list = 2;
}

message ExecuteStepsRequest {
  repeated TaskToD tasks = 1;
}

message ExecuteStepsReply {
  repeated uint32 failed_task_id_list = 1;
}

message CreateCgroupForJobsRequest {
  repeated JobToD job_list = 1;
}

message CreateCgroupForJobsReply {}

message ReleaseCgroupForJobsRequest {
  repeated uint32 task_id_list = 1;
  repeated uint32 uid_list = 2;
}

message ReleaseCgroupForJobsReply {}

message TerminateStepsRequest {
  repeated uint32 task_id_list = 1;
}

message TerminateStepsReply {
  bool ok = 1;
  string reason = 2;
}

message TerminateOrphanedStepRequest {
  repeated uint32 task_id_list = 1;
}

message TerminateOrphanedStepReply {
  bool ok = 1;
  string reason = 2;
}

message ChangeJobTimeLimitRequest {
  uint32 task_id = 1;
  int64 time_limit_seconds = 2;
}

message ChangeJobTimeLimitReply {
  bool ok = 1;
}

message CancelTaskRequest {
  uint32 operator_uid = 1;

  // Filters
  repeated uint32 filter_task_ids = 2;
  string filter_partition = 3;
  string filter_account = 4;
  TaskStatus filter_state = 5;
  string filter_task_name = 6;
  repeated string filter_nodes = 7;
  string filter_username = 8;
}

message CancelTaskReply {
  repeated uint32 cancelled_tasks = 2;
  repeated uint32 not_cancelled_tasks = 3;
  repeated string not_cancelled_reasons = 4;
}

message QueryStepFromPortRequest {
  uint32 port = 1;
}

message QueryStepFromPortReply {
  bool ok = 1;
  uint32 task_id = 2;
}

message QueryStepFromPortForwardRequest {
  uint32 ssh_remote_port = 1;
  string ssh_remote_address = 2;
  uint32 uid = 3;
}

message QueryStepFromPortForwardReply {
  bool ok = 1;
  bool from_user = 2;
  uint32 task_id = 3;
  string cgroup_path = 4;
}

message QueryCranedInfoRequest {
  string craned_name = 1;
}

message QueryCranedInfoReply {
  repeated CranedInfo craned_info_list = 1;
}

message QueryPartitionInfoRequest {
  string partition_name = 1;
}

message QueryPartitionInfoReply {
  repeated PartitionInfo partition_info_list = 1;
}

message QueryReservationInfoRequest {
  uint32 uid = 1;
  string reservation_name = 2;
}

message QueryReservationInfoReply {
  bool ok = 1;
  string reason = 2;
  repeated ReservationInfo reservation_info_list = 3;
}

message ModifyTaskRequest {
  enum TargetAttributes {
    TimeLimit = 0;
    Priority = 1;
    Hold = 2;
  }

  uint32 uid = 1;
  repeated uint32 task_ids = 2;

  TargetAttributes attribute = 3;

  oneof value {
    int64 time_limit_seconds = 4;
    double mandated_priority = 5;

    // If hold_seconds == 0, release the hold constraint timer if any exists;
    // If hold_seconds > 0, add or overwrite a hold constraint timer;
    // If hold_seconds == MaxInt64, add a hold constraint without timer.
    int64 hold_seconds = 7;
  }
}

message ModifyTaskReply {
  repeated uint32 modified_tasks = 2;
  repeated uint32 not_modified_tasks = 3;
  repeated string not_modified_reasons = 4;
}

message ModifyTasksExtraAttrsRequest {
  uint32 uid = 1;
  map<uint32 /*taskid*/, string /*extraAttrs*/> extra_attrs_list = 2;
}

message ModifyTasksExtraAttrsReply {
  repeated uint32 modified_tasks = 1;
  repeated uint32 not_modified_tasks = 2;
  repeated string not_modified_reasons = 3;
}

message ModifyCranedStateRequest {
  uint32 uid = 1;
  repeated string craned_ids = 2;
  CranedControlState new_state = 3;
  string reason = 4;
}

message ModifyCranedStateReply {
  repeated string modified_nodes = 2;
  repeated string not_modified_nodes = 3;
  repeated string not_modified_reasons = 4;
}

message AddAccountRequest {
  uint32 uid = 1;
  AccountInfo account = 2;
}

message AddAccountReply {
  bool ok = 1;
  ErrCode code = 2;
}

message AddUserRequest {
  uint32 uid = 1;
  UserInfo user = 2;
}

message AddUserReply {
  bool ok = 1;
  ErrCode code = 2;
}

message AddQosRequest {
  uint32 uid = 1;
  QosInfo qos = 2;
}

message AddQosReply {
  bool ok = 1;
  ErrCode code = 2;
}

message DeleteAccountRequest {
  uint32 uid = 1;
  repeated string account_list = 2;
}

message DeleteAccountReply {
  bool ok = 1;
  repeated RichError rich_error_list = 2;
}

message DeleteUserRequest {
  uint32 uid = 1;
  repeated string user_list = 2;
  string account = 3;
}

message DeleteUserReply {
  bool ok = 1;
  repeated RichError rich_error_list = 2;
}

message DeleteQosRequest {
  uint32 uid = 1;
  repeated string qos_list = 2;
}

message DeleteQosReply {
  bool ok = 1;
  repeated RichError rich_error_list = 2;
}

message ModifyAccountRequest {
  uint32 uid = 1;
  ModifyField modify_field = 2;    // modify item field
  repeated string value_list = 3;  // new value
  string name = 4;
  OperationType type = 5;
  bool force = 6;
}

message ModifyAccountReply {
  bool ok = 1;
  repeated RichError rich_error_list = 2;
}

message ModifyUserRequest {
  uint32 uid = 1;
  ModifyField modify_field = 2;    // modify item field
  repeated string value_list = 3;  // new value
  string name = 4;
  string partition = 5;
  OperationType type = 6;
  string account = 8;
  bool force = 9;
}

message ModifyUserReply {
  bool ok = 1;
  repeated RichError rich_error_list = 2;
}

message ModifyQosRequest {
  uint32 uid = 1;
  ModifyField modify_field = 2;  // modify item field
  string value = 3;              // new value
  string name = 4;
}

message ModifyQosReply {
  bool ok = 1;
  ErrCode code = 2;
}

message QueryAccountInfoRequest {
  uint32 uid = 1;
  repeated string account_list = 2;
}

message QueryAccountInfoReply {
  bool ok = 1;
  repeated AccountInfo account_list = 2;
  repeated RichError rich_error_list = 3;
}

message QueryUserInfoRequest {
  uint32 uid = 1;
  repeated string user_list = 2;
  string account = 3;
}

message QueryUserInfoReply {
  bool ok = 1;
  repeated UserInfo user_list = 2;
  repeated RichError rich_error_list = 3;
}

message QueryQosInfoRequest {
  uint32 uid = 1;
  repeated string qos_list = 2;
}

message QueryQosInfoReply {
  bool ok = 1;
  repeated QosInfo qos_list = 2;
  repeated RichError rich_error_list = 3;
}

message BlockAccountOrUserRequest {
  uint32 uid = 1;
  bool block = 2;
  EntityType entity_type = 3;
  repeated string entity_list = 4;
  string account = 5;
}

message BlockAccountOrUserReply {
  bool ok = 1;
  repeated RichError rich_error_list = 2;
}

message ModifyPartitionAclRequest {
  uint32 uid = 1;
  string partition = 2;
  bool is_allowed_list = 3;
  repeated string accounts = 4;
}

message ModifyPartitionAclReply {
  bool ok = 1;
  ErrCode code = 2;
}

message MigrateSshProcToCgroupRequest {
  int32 pid = 1;
  uint32 task_id = 2;
}

message MigrateSshProcToCgroupReply {
  bool ok = 1;
}

message QuerySshStepEnvVariablesRequest {
  uint32 task_id = 1;
}

message QuerySshStepEnvVariablesReply {
  bool ok = 1;
  map<string /*name*/, string /*value*/> env_map = 2;
}

message QuerySshStepEnvVariablesForwardRequest {
  uint32 task_id = 1;
  string execution_node = 2;
}

message QuerySshStepEnvVariablesForwardReply {
  bool ok = 1;
  map<string /*name*/, string /*value*/> env_map = 2;
}

message QueryClusterInfoRequest {
  repeated string filter_partitions = 1;
  repeated string filter_nodes = 2;
  repeated CranedResourceState filter_craned_resource_states = 3;
  repeated CranedControlState filter_craned_control_states = 4;
  repeated CranedPowerState filter_craned_power_states = 5;
}

message QueryClusterInfoReply {
  bool ok = 1;
  repeated TrimmedPartitionInfo partitions = 2;
}

message QueryTasksInfoRequest {
  repeated uint32 filter_task_ids = 1;
  repeated string filter_partitions = 2;
  uint32 num_limit = 3;
  repeated string filter_task_names = 4;
  repeated string filter_qos = 5;

  repeated TaskStatus filter_task_states = 6;
  repeated string filter_users = 7;
  repeated string filter_accounts = 8;
  TimeInterval filter_submit_time_interval = 9;
  TimeInterval filter_start_time_interval = 10;
  TimeInterval filter_end_time_interval = 11;

  bool option_include_completed_tasks = 15;
}

message QueryTasksInfoReply {
  bool ok = 1;
  repeated TaskInfo task_info_list = 2;
}

message CreateReservationRequest {
  uint32 uid = 1;
  string reservation_name = 2;
  int64 start_time_unix_seconds = 3;
  int64 duration_seconds = 4;
  string partition = 5;
  string craned_regex = 6;

  repeated string allowed_accounts = 7;
  repeated string denied_accounts = 8;
  repeated string allowed_users = 9;
  repeated string denied_users = 10;
}

message CreateReservationReply {
  bool ok = 1;
  string reason = 2;
}

message DeleteReservationRequest {
  uint32 uid = 1;
  string reservation_name = 2;
}

message DeleteReservationReply {
  bool ok = 1;
  string reason = 2;
}

message StreamCallocRequest {
  enum CallocRequestType {
    TASK_REQUEST = 0;
    TASK_COMPLETION_REQUEST = 1;
  }

  message TaskReq {
    int32 calloc_pid = 1;
    TaskToCtld task = 2;
  }

  message TaskCompleteReq {
    uint32 task_id = 1;
    TaskStatus status = 2;
  }

  CallocRequestType type = 1;

  oneof payload {
    TaskReq payload_task_req = 2;
    TaskCompleteReq payload_task_complete_req = 3;
  }
}

message StreamCallocReply {
  enum CforedReplyType {
    TASK_ID_REPLY = 0;
    TASK_RES_ALLOC_REPLY = 1;
    TASK_CANCEL_REQUEST = 2;
    TASK_COMPLETION_ACK_REPLY = 3;
  }

  message TaskIdReply {
    bool ok = 1;
    uint32 task_id = 2;
    string failure_reason = 3;
  }

  message TaskResAllocatedReply {
    bool ok = 1;
    string allocated_craned_regex = 2;
  }

  message TaskCancelRequest {
    uint32 task_id = 1;
  }

  message TaskCompletionAckReply {
    bool ok = 1;
  }

  CforedReplyType type = 1;

  oneof payload {
    TaskIdReply payload_task_id_reply = 2;
    TaskResAllocatedReply payload_task_alloc_reply = 3;
    TaskCancelRequest payload_task_cancel_request = 4;
    TaskCompletionAckReply payload_task_completion_ack_reply = 5;
  }
}

message StreamCforedRequest {
  enum CforedRequestType {
    CFORED_REGISTRATION = 0;
    TASK_REQUEST = 1;
    TASK_COMPLETION_REQUEST = 2;
    CFORED_GRACEFUL_EXIT = 3;
  }
  CforedRequestType type = 1;

  message CforedReg {
    string cfored_name = 1;
  }

  message TaskReq {
    string cfored_name = 1;
    int32 pid = 2;
    TaskToCtld task = 3;
  }

  message TaskCompleteReq {
    string cfored_name = 1;
    uint32 task_id = 2;
    TaskStatus status = 3;
    InteractiveTaskType interactive_type = 4;
  }

  message GracefulExitReq {
    string cfored_name = 1;
  }

  oneof payload {
    CforedReg payload_cfored_reg = 2;
    TaskReq payload_task_req = 3;
    TaskCompleteReq payload_task_complete_req = 4;
    GracefulExitReq payload_graceful_exit_req = 5;
  }
}

message StreamCtldReply {
  enum CtldReplyType {
    TASK_ID_REPLY = 0;
    TASK_RES_ALLOC_REPLY = 1;
    TASK_CANCEL_REQUEST = 2;
    TASK_COMPLETION_ACK_REPLY = 3;
    CFORED_REGISTRATION_ACK = 4;
    CFORED_GRACEFUL_EXIT_ACK = 5;
  }

  message TaskIdReply {
    int32 pid = 1;
    bool ok = 2;
    uint32 task_id = 3;
    string failure_reason = 4;
  }

  message TaskResAllocatedReply {
    uint32 task_id = 1;
    bool ok = 2;
    string allocated_craned_regex = 3;
    string failure_reason = 4;
    repeated string craned_ids = 5;
  }

  message TaskCancelRequest {
    uint32 task_id = 1;
  }

  message TaskCompletionAckReply {
    uint32 task_id = 1;
  }

  message CforedRegistrationAck {
    bool ok = 1;
    string failure_reason = 2;
  }

  message CforedGracefulExitAck {
    bool ok = 1;
  }

  CtldReplyType type = 1;

  oneof payload {
    CforedRegistrationAck payload_cfored_reg_ack = 2;
    TaskResAllocatedReply payload_task_res_alloc_reply = 3;
    TaskCancelRequest payload_task_cancel_request = 4;
    TaskCompletionAckReply payload_task_completion_ack = 5;
    TaskIdReply payload_task_id_reply = 6;
    CforedGracefulExitAck payload_graceful_exit_ack = 7;
  }
}

message StreamCrunRequest {
  enum CrunRequestType {
    TASK_REQUEST = 0;
    TASK_COMPLETION_REQUEST = 1;
    TASK_IO_FORWARD = 2;
    TASK_X11_FORWARD = 3;
  }

  message TaskReq {
    int32 crun_pid = 1;
    TaskToCtld task = 2;
  }

  message TaskCompleteReq {
    uint32 task_id = 1;
    TaskStatus status = 2;
  }

  message TaskIOForwardReq {
    uint32 task_id = 1;
    bytes msg = 2;
  }

  message TaskX11ForwardReq {
    uint32 task_id = 1;
    bytes msg = 2;
  }

  CrunRequestType type = 1;

  oneof payload {
    TaskReq payload_task_req = 2;
    TaskCompleteReq payload_task_complete_req = 3;
    TaskIOForwardReq payload_task_io_forward_req = 4;
    TaskX11ForwardReq payload_task_x11_forward_req = 5;
  }
}

message StreamCrunReply {
  enum CforedCrunReplyType {
    TASK_ID_REPLY = 0;
    TASK_RES_ALLOC_REPLY = 1;
    TASK_CANCEL_REQUEST = 2;
    TASK_COMPLETION_ACK_REPLY = 3;
    TASK_IO_FORWARD = 4;
    TASK_IO_FORWARD_READY = 5;
    TASK_X11_FORWARD = 6;
  }

  message TaskIdReply {
    bool ok = 1;
    uint32 task_id = 2;
    string failure_reason = 3;
  }

  message TaskResAllocatedReply {
    bool ok = 1;
    string allocated_craned_regex = 2;
  }

  message TaskCancelRequest {
    uint32 task_id = 1;
  }

  message TaskCompletionAckReply {
    bool ok = 1;
  }

  message TaskIOForwardReadyReply {
    bool ok = 1;
  }

  message TaskIOForwardReply {
    bytes msg = 1;
  }

  message TaskX11ForwardReply {
    bytes msg = 1;
  }

  CforedCrunReplyType type = 1;

  oneof payload {
    TaskIdReply payload_task_id_reply = 2;
    TaskResAllocatedReply payload_task_alloc_reply = 3;
    TaskCancelRequest payload_task_cancel_request = 4;
    TaskCompletionAckReply payload_task_completion_ack_reply = 5;
    TaskIOForwardReadyReply payload_task_io_forward_ready_reply = 6;
    TaskIOForwardReply payload_task_io_forward_reply = 7;
    TaskX11ForwardReply payload_task_x11_forward_reply = 8;
  }
}

message StreamTaskIORequest {
  enum SupervisorRequestType {
    SUPERVISOR_REGISTER = 0;
    TASK_OUTPUT = 1;
    SUPERVISOR_UNREGISTER = 2;
    TASK_X11_OUTPUT = 3;
  }

  message SupervisorRegisterReq {
    string craned_id = 1;
    uint32 task_id = 2;
    uint32 step_id = 3;
  }

  message TaskOutputReq {
    bytes msg = 2;
  }

  message SupervisorUnRegisterReq {
    string craned_id = 1;
    uint32 task_id = 2;
    uint32 step_id = 3;
  }

  message TaskX11OutputReq {
    uint32 task_id = 1;
    uint32 step_id = 2;
    bytes msg = 3;
  }

  SupervisorRequestType type = 1;

  oneof payload {
    SupervisorRegisterReq payload_register_req = 2;
    TaskOutputReq payload_task_output_req = 3;
    SupervisorUnRegisterReq payload_unregister_req = 4;
    TaskX11OutputReq payload_task_x11_output_req = 5;
  }
}

message StreamTaskIOReply {
  enum SupervisorReplyType {
    SUPERVISOR_REGISTER_REPLY = 0;
    TASK_INPUT = 1;
    SUPERVISOR_UNREGISTER_REPLY = 2;
    TASK_X11_INPUT = 3;
  }

  message SupervisorRegisterReply {
    bool ok = 1;
  }

  message TaskInputReq {
    uint32 task_id = 1;
    uint32 step_id = 2;
    bytes msg = 3;
  }

  message SupervisorUnregisterReply {
    bool ok = 1;
  }

  message TaskX11InputReq {
    uint32 task_id = 1;
    uint32 step_id = 2;
    bytes msg = 3;
  }

  SupervisorReplyType type = 1;

  oneof payload {
    SupervisorRegisterReply payload_supervisor_register_reply = 2;
    TaskInputReq payload_task_input_req = 3;
    SupervisorUnregisterReply payload_supervisor_unregister_reply = 4;
    TaskX11InputReq payload_task_x11_input_req = 5;
  }
}

message PowerStateChangeRequest {
  string craned_id = 1;
  CranedPowerState state = 2;
  string reason = 3;
}

message PowerStateChangeReply {
  bool ok = 1;
}

message EnableAutoPowerControlRequest {
  uint32 uid = 1;
  repeated string craned_ids = 2;
  bool enable = 3;
}

message EnableAutoPowerControlReply {
  repeated string modified_nodes = 1;
  repeated string not_modified_nodes = 2;
  repeated string not_modified_reasons = 3;
}

message ConfigHashCalcReply {
  // Hex-encoded (lowercase) SHA256 digest of the normalized YAML config.
  string hash_val = 1;
}

// Todo: Divide service into two parts: one for Craned and one for Crun
//  We need to distinguish the message sender
//  and have some kind of authentication
service CraneCtld {
  /* RPCs called from ccancel */
  rpc CancelTask(CancelTaskRequest) returns (CancelTaskReply);

  /* RPCs called from cbatch */
  rpc SubmitBatchTask(SubmitBatchTaskRequest) returns (SubmitBatchTaskReply);
  rpc SubmitBatchTasks(SubmitBatchTasksRequest) returns (SubmitBatchTasksReply);

  /* PRCs called from ccontrol */
  rpc QueryCranedInfo(QueryCranedInfoRequest) returns (QueryCranedInfoReply);
  rpc QueryPartitionInfo(QueryPartitionInfoRequest) returns (QueryPartitionInfoReply);
  rpc QueryReservationInfo(QueryReservationInfoRequest) returns (QueryReservationInfoReply);
  rpc ModifyTask(ModifyTaskRequest) returns (ModifyTaskReply);
  rpc ModifyNode(ModifyCranedStateRequest) returns (ModifyCranedStateReply);
  rpc ModifyPartitionAcl(ModifyPartitionAclRequest) returns (ModifyPartitionAclReply);
  rpc EnableAutoPowerControl(EnableAutoPowerControlRequest) returns (EnableAutoPowerControlReply);
  rpc ModifyTasksExtraAttrs(ModifyTasksExtraAttrsRequest) returns (ModifyTasksExtraAttrsReply);

  /* RPCs called from cacctmgr */
  rpc AddAccount(AddAccountRequest) returns (AddAccountReply);
  rpc AddUser(AddUserRequest) returns (AddUserReply);
  rpc AddQos(AddQosRequest) returns (AddQosReply);

  rpc DeleteAccount(DeleteAccountRequest) returns (DeleteAccountReply);
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserReply);
  rpc DeleteQos(DeleteQosRequest) returns (DeleteQosReply);

  rpc QueryAccountInfo(QueryAccountInfoRequest) returns (QueryAccountInfoReply);
  rpc QueryUserInfo(QueryUserInfoRequest) returns (QueryUserInfoReply);
  rpc QueryQosInfo(QueryQosInfoRequest) returns (QueryQosInfoReply);

  rpc ModifyAccount(ModifyAccountRequest) returns (ModifyAccountReply);
  rpc ModifyUser(ModifyUserRequest) returns (ModifyUserReply);
  rpc ModifyQos(ModifyQosRequest) returns (ModifyQosReply);

  rpc BlockAccountOrUser(BlockAccountOrUserRequest) returns (BlockAccountOrUserReply);

  /* RPCs called from cinfo */
  rpc QueryClusterInfo(QueryClusterInfoRequest) returns (QueryClusterInfoReply);

  /* common RPCs */
  rpc QueryTasksInfo(QueryTasksInfoRequest) returns (QueryTasksInfoReply);
  rpc CreateReservation(CreateReservationRequest) returns (CreateReservationReply);
  rpc DeleteReservation(DeleteReservationRequest) returns (DeleteReservationReply);

  /* RPC called form plugin */
  rpc PowerStateChange(PowerStateChangeRequest) returns (PowerStateChangeReply);
}

service CraneCtldForInternal {
  /* RPCs called from Craned */
  rpc StepStatusChange(StepStatusChangeRequest) returns (StepStatusChangeReply);
  rpc CranedTriggerReverseConn(CranedTriggerReverseConnRequest) returns (google.protobuf.Empty);
  rpc CranedRegister(CranedRegisterRequest) returns (CranedRegisterReply);

  /* RPCs called from Cfored */
  rpc CforedStream(stream StreamCforedRequest) returns (stream StreamCtldReply);
}

service Craned {
  /* ----------------------------------- Called from CraneCtld ---------------------------------------------------- */
  rpc Configure(ConfigureCranedRequest) returns (google.protobuf.Empty);
  rpc ExecuteSteps(ExecuteStepsRequest) returns (ExecuteStepsReply);

  rpc CreateCgroupForJobs(CreateCgroupForJobsRequest) returns (CreateCgroupForJobsReply);
  rpc ReleaseCgroupForJobs(ReleaseCgroupForJobsRequest) returns (ReleaseCgroupForJobsReply);
  rpc ConfigHashCalc(google.protobuf.Empty) returns (ConfigHashCalcReply);

  /*
  If the task is an interactive task, the resource uuid is also revoked.
   If there's no process in this interactive task, just deallocate all the resources.
   If there are processes in this interactive task, kill all the processes and deallocate resources.
  If the task is a batch task, just kill it.
  */
  rpc TerminateSteps(TerminateStepsRequest) returns (TerminateStepsReply);
  rpc TerminateOrphanedStep(TerminateOrphanedStepRequest) returns (TerminateOrphanedStepReply);
  rpc ChangeJobTimeLimit(ChangeJobTimeLimitRequest) returns (ChangeJobTimeLimitReply);

  /* ----------------------------------- Called from Craned  ------------------------------------------------------ */
  rpc QueryStepFromPort(QueryStepFromPortRequest) returns (QueryStepFromPortReply);
  rpc QuerySshStepEnvVariables(QuerySshStepEnvVariablesRequest) returns (QuerySshStepEnvVariablesReply);
  /* ----------------------------------- Called from Supervisor  --------------------------------------------------- */
  rpc StepStatusChange(StepStatusChangeRequest) returns (StepStatusChangeReply);
}

service CranedForPam {
  /* ----------------------------------- Called from Pam Module  --------------------------------------------------- */
  rpc QueryStepFromPortForward(QueryStepFromPortForwardRequest) returns (QueryStepFromPortForwardReply);
  rpc MigrateSshProcToCgroup(MigrateSshProcToCgroupRequest) returns (MigrateSshProcToCgroupReply);
  rpc QuerySshStepEnvVariablesForward(QuerySshStepEnvVariablesForwardRequest)
      returns (QuerySshStepEnvVariablesForwardReply);
}

service CraneForeD {
  rpc CallocStream(stream StreamCallocRequest) returns (stream StreamCallocReply);
  rpc CrunStream(stream StreamCrunRequest) returns (stream StreamCrunReply);
  rpc TaskIOStream(stream StreamTaskIORequest) returns (stream StreamTaskIOReply);
  rpc QueryStepFromPort(QueryStepFromPortRequest) returns (QueryStepFromPortReply);
}