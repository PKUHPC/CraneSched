/**
 * Copyright (c) 2024 Peking University and Peking University
 * Changsha Institute for Computing and Digital Economy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

syntax = "proto3";

package crane.grpc;
option go_package = "/protos";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

// All the definitions in this proto file can be found in PublicHeader.h
// They are just protobuf version definitions.

message CranedId {
  uint32 partition_id = 1;
  uint32 craned_index = 2;
}

message AllocatableResource {
  double cpu_core_limit = 1;
  uint64 memory_limit_bytes = 2;
  uint64 memory_sw_limit_bytes = 3;
}

message TypeCountMap {
  map<string /*Type*/, uint64> type_count_map = 1;
  uint64 total = 2;
}

message DeviceMap {
  map<string /*name*/, TypeCountMap> name_type_map = 1;
}

message Slots {
  repeated string slots = 1;
}

message DeviceTypeSlotsMap {
  map<string /*Type*/, Slots /*index of slot*/> type_slots_map = 1;
}

message DedicatedResourceInNode {
  map<string /*device name*/, DeviceTypeSlotsMap> name_type_map = 1;
}

message ResourceInNode {
  AllocatableResource allocatable_res_in_node = 1;
  DedicatedResourceInNode dedicated_res_in_node = 2;
}

message ResourceV2 {
  map<string /*craned id*/, ResourceInNode> each_node_res = 1;
}

message ResourceView {
  AllocatableResource allocatable_res = 1;
  DeviceMap device_map = 2;
}

enum PartitionState {
  PARTITION_UP = 0;
  PARTITION_DOWN = 1;
}

enum CranedResourceState {
  CRANE_IDLE = 0;
  CRANE_MIX = 1;
  CRANE_ALLOC = 2;
  CRANE_DOWN = 3;
}

enum CranedControlState {
  CRANE_NONE = 0;
  CRANE_DRAIN = 1;
}

enum TaskStatus {
  Pending = 0;
  Running = 1;
  Completed = 2;
  Failed = 3;
  ExceedTimeLimit = 4;
  Cancelled = 5;

  Invalid = 15;
}

enum TaskType {
  Interactive = 0;
  Batch = 1;
}

enum InteractiveTaskType {
  Calloc = 0;
  Crun = 1;
}

message TaskToCtld {
  /* -------- Fields that are set at the submission time. ------- */
  google.protobuf.Duration time_limit = 1;

  string partition_name = 2;
  ResourceView resources = 3;

  TaskType type = 4;

  uint32 uid = 5;
  string account = 6;
  string name = 7;
  string qos = 8;
  uint32 node_num = 9;
  uint32 ntasks_per_node = 10;
  double cpus_per_task = 11;

  bool requeue_if_failed = 12;
  bool get_user_env = 13;

  uint32 gid = 14; // egid

  oneof payload {
    BatchTaskAdditionalMeta batch_meta = 21;
    InteractiveTaskAdditionalMeta interactive_meta = 22;
  }

  string extra_attr = 23;

  string cmd_line = 31;
  string cwd = 32; // Current working directory
  map<string, string> env = 33;

  string excludes = 34;
  string nodelist = 35;
}

message TaskInEmbeddedDb {
  RuntimeAttrOfTask runtime_attr = 1;
  TaskToCtld task_to_ctld = 2;
}

message RuntimeAttrOfTask {
  // Fields that won't change after this task is accepted.
  uint32 task_id = 1;
  int64 task_db_id = 3;
  string username = 5;

  // Fields that will change after this task is accepted.
  int32 requeue_count = 11;
  repeated string craned_ids = 12;
  TaskStatus status = 13;
  uint32 exit_code = 14;

  google.protobuf.Timestamp submit_time = 15;
  google.protobuf.Timestamp start_time = 16;
  google.protobuf.Timestamp end_time = 17;

  bool held = 18;
  ResourceV2 resources = 19;
  double cached_priority = 20;
}

message TaskToD {
  uint32 task_id = 1;
  TaskType type = 2;
  uint32 partition_id = 3;

  ResourceInNode resources = 4;

  // If this task is PENDING, start_time is either not set (default constructed)
  // or an estimated start time.
  // If this task is RUNNING, start_time is the actual starting time.
  google.protobuf.Timestamp start_time = 5; // Currently Only used in CraneCtld
  google.protobuf.Duration time_limit = 6;

  string partition = 8;
  uint32 uid = 9;
  uint32 gid = 10;

  oneof payload {
    BatchTaskAdditionalMeta batch_meta = 11;
    InteractiveTaskAdditionalMeta interactive_meta = 12;
  }

  map<string, string> env = 13;
  string cwd = 14;

  repeated string allocated_nodes = 15;

  string name = 16;
  string account = 17;
  string qos = 18;

  repeated string excludes = 19;
  repeated string nodelist = 20;

  uint32 node_num = 21;
  uint32 ntasks_per_node = 22;
  double cpus_per_task = 23;

  bool get_user_env = 24;
}

message BatchTaskAdditionalMeta {
  string sh_script = 1;
  string output_file_pattern = 3;
  string error_file_pattern = 4;
}

message InteractiveTaskAdditionalMeta {
  string cfored_name = 1;
  string sh_script = 2;
  string term_env = 3;
  InteractiveTaskType interactive_type = 4;

  bool pty = 5;
  bool x11 = 6;

  message X11Meta {
    string target = 1;
    uint32 port = 2;
    string cookie = 3;
  }

  X11Meta x11_meta = 7;
}

message TaskInfo {
  // Static task information
  TaskType type = 1;
  uint32 task_id = 2;
  string name = 3;
  string partition = 4;

  uint32 uid = 5;
  uint32 gid = 6;

  google.protobuf.Duration time_limit = 7;
  google.protobuf.Timestamp start_time = 8;
  google.protobuf.Timestamp end_time = 9;
  google.protobuf.Timestamp submit_time = 10;

  string account = 11;
  uint32 node_num = 12;
  string cmd_line = 13;
  string cwd = 14;
  string username = 15;
  string qos = 16;
  ResourceView res_view = 17;
  repeated string req_nodes = 19;
  repeated string exclude_nodes = 20;

  string extra_attr = 21;

  // Dynamic task information
  bool held = 30;
  TaskStatus status = 31;

  uint32 exit_code = 33;
  uint32 priority = 34;
  oneof pending_reason_or_craned_list {
    string pending_reason = 35;
    string craned_list = 36;
  }

  // The time of different nodes across the whole cluster might not always be synchronized.
  // If the time on the front end node is more than several seconds ahead of the CraneCtld node,
  // a negative elapsed time might occur.
  // To avoid this, the elapsed time of a task is calculated on the CraneCtld side.
  google.protobuf.Duration elapsed_time = 37;
  repeated string execution_node = 38;
}

message PartitionInfo {
  string hostlist = 1;
  PartitionState state = 2;
  string name = 3;

  uint32 total_nodes = 4;
  uint32 alive_nodes = 5;

  ResourceView res_total = 6;
  ResourceView res_avail = 7;
  ResourceView res_alloc = 8;

  repeated string allowed_accounts = 9;
  repeated string denied_accounts = 10;
}

message CranedInfo {
  string hostname = 1;
  CranedResourceState resource_state = 2;
  CranedControlState control_state = 3;

  ResourceInNode res_total = 4;
  ResourceInNode res_avail = 5;
  ResourceInNode res_alloc = 6;

  repeated string partition_names = 10;
  uint32 running_task_num = 11;

  string craned_version = 12;
  string system_desc = 13;
  google.protobuf.Timestamp craned_start_time = 14;
  google.protobuf.Timestamp system_boot_time = 15;
  google.protobuf.Timestamp last_busy_time = 16;
}

message TrimmedPartitionInfo {
  message TrimmedCranedInfo {
    CranedResourceState resource_state = 1;
    CranedControlState control_state = 2;
    uint32 count = 3;
    string craned_list_regex = 4;
  }

  string name = 1;
  PartitionState state = 2;
  repeated TrimmedCranedInfo craned_lists = 3;
}

enum ErrCode {
  SUCCESS = 0;  // Success

  ERR_INVALID_UID = 1;   // Invalid UID passed
  ERR_INVALID_OP_USER = 2; // Invalid operation user
  ERR_INVALID_USER = 3;  // Invalid user
  ERR_PERMISSION_USER = 4;  // User permissions too low, no permission to operate

  ERR_BLOCKED_USER = 5;
  ERR_USER_ALREADY_EXISTS = 6;  // User duplicate account insertion
  ERR_USER_ACCESS_TO_ACCOUNT_DENIED = 7;  // User does not have permission for the account
  ERR_INVALID_ADMIN_LEVEL = 8;  // Invalid permission level
  ERR_USER_ACCOUNT_MISMATCH = 9; // User does not belong to the account

  ERR_NO_ACCOUNT_SPECIFIED = 10;
  ERR_INVALID_ACCOUNT = 11;  // Invalid account
  ERR_ACCOUNT_ALREADY_EXISTS = 12;  // Duplicate account insertion
  ERR_INVALID_PARENT_ACCOUNT = 13;  // Invalid parent account
  ERR_ACCOUNT_HAS_CHILDREN = 14;   // Account has child nodesï¼Œcannot be deleted.

  ERR_BLOCKED_ACCOUNT = 15;
  ERR_INVALID_PARTITION = 16;  // Invalid partition, partition does not exist
  ERR_PARTITION_MISSING = 17; // Account/user does not include this partition
  ERR_PARTITION_ALREADY_EXISTS = 18; // Account/user duplicate insertion
  ERR_PARENT_ACCOUNT_PARTITION_MISSING = 19; // Parent account does not include this partition

  ERR_USER_EMPTY_PARTITION = 20; // Cannot add QoS when user has no partition
  ERR_CHILD_HAS_PARTITION = 21; // Failed to delete the account partition as child nodes contain this partition.
  ERR_HAS_NO_QOS_IN_PARTITION = 22;
  ERR_HAS_ALLOWED_QOS_IN_PARTITION = 23;
  ERR_INVALID_QOS = 24;  // Invalid QoS, QoS does not exist

  ERR_DB_QOS_ALREADY_EXISTS = 25;  // Duplicate QoS insertion in the database.
  ERR_QOS_REFERENCES_EXIST = 26;  // QoS reference count is not zero.
  ERR_CONVERT_TO_INTEGER = 27;  // String to integer conversion failed
  ERR_TIME_LIMIT = 28;  // Invalid time value
  ERR_QOS_MISSING = 29; // Account/user does not include this QoS.

  ERR_QOS_ALREADY_EXISTS = 30; // Account/user duplicate insertion.
  ERR_PARENT_ACCOUNT_QOS_MISSING = 31; // Parent account does not include this QoS.
  ERR_SET_ALLOWED_QOS = 32; // QoS is the default QoS, but not found in the new QoS list.
  ERR_DEFAULT_QOS_NOT_INHERITED = 33; // Default QoS is not in the allowed QoS list
  ERR_DUPLICATE_DEFAULT_QOS = 34; // Duplicate default QoS setting

  ERR_CHILD_HAS_DEFAULT_QOS = 35; // Failed to delete the account QoS as child nodes have set it as the default QoS. 
  ERR_SET_ACCOUNT_QOS = 36; // QoS is used by some descendant node or itself of the account. 
  ERR_SET_DEFAULT_QOS = 37; // Qos not in allowed qos list or is already the default qos
  ERR_DEFAULT_QOS_MODIFICATION_DENIED = 38; //  // QoS cannot be directly deleted when it is set as the default QoS.
  ERR_UPDATE_DATABASE = 39;  // Database update failed

  ERR_GENERIC_FAILURE = 40;
  ERR_NO_RESOURCE = 41;
  ERR_NON_EXISTENT = 42;
  ERR_INVALID_NODE_NUM = 43;
  ERR_INVAILD_NODE_LIST = 44;

  ERR_INVAILD_EX_NODE_LIST = 45;
  ERR_TIME_TIMIT_BEYOND = 46;
  ERR_CPUS_PER_TASK_BEYOND = 47;
  ERR_NO_ENOUGH_NODE = 48;
  ERR_SYSTEM_ERR = 49;

  ERR_EXISTING_TASK = 50;
  ERR_BEYOND_TASK_ID = 51;
  ERR_INVALID_PARAM = 52;
  ERR_STOP = 53;
  ERR_PERMISSION_DENIED = 54;

  ERR_CONNECTION_TIMEOUT = 55;
  ERR_CONNECTION_ABORTED = 56;
  ERR_RPC_FAILURE = 57;
  ERR_TOKEN_REQUEST_FAILURE = 58;
  ERR_STREAM_BROKEN = 59;

  ERR_INVALID_STUB = 60;
  ERR_CGROUP = 61;
  ERR_PROTOBUF = 62;
  ERR_LIB_EVENT = 63;
  ERR_NO_AVAIL_NODE = 64;

  ERR_MAX_JOB_COUNT_PER_USER = 65;
  ERR_USER_NO_PRIVILEGE = 66;
  ERR_NOT_IN_ALLOWED_LIST = 67;  // The current account is not in the allowed account list for the partition.
  ERR_IN_DENIED_LIST = 68;  // The current account has been explicitly added to the deny list for the partition.
}

enum EntityType {
  Account = 0;
  User = 1;
}

enum OperationType {
  Overwrite = 0;
  Add = 1;
  Delete = 2;
}

enum ModifyField {
  // user and account
  Partition = 0;
  Qos = 1;
  DefaultQos = 2;
  // account and qos
  Description = 10;
  // user
  AdminLevel = 20;
  DefaultAccount = 21;
  // qos
  Priority = 30;
  MaxJobsPerUser = 31;
  MaxCpusPerUser = 32;
  MaxTimeLimitPerTask = 33;
}

message AccountInfo {
  string name = 1;
  string description = 2;
  repeated string users = 3;
  repeated string child_accounts = 4;
  string parent_account = 5;
  repeated string allowed_partitions = 6;
  string default_qos = 7;
  repeated string allowed_qos_list = 8;
  repeated string coordinators = 9;
  bool blocked = 10;
}

// Note: UserInfo DIFFERS from the `User` struct in C++ code and database representation
//       and is ONLY used for communication between CraneCtld and cacctmgr command.
//       If an user belongs to multiple accounts, There will be multiple `UserInfo`
//       messages with `account` pointing to each account.
//       For example, if a user (uid=1) belongs to accounts `1,2,3`,
//       there will be three `UserInfo` messages: (uid=1, account=1), (uid=1, account=2),
//       (uid=1, account=3).
//       The c++ code and database representation use a Map<account name, AttrsInAccount> to contain
//       in ONE UserInfo message all the information belonging to different accounts.
message UserInfo {
  enum AdminLevel {
    None = 0;
    Operator = 1;
    Admin = 2;
    Root = 3;
  };
  message AllowedPartitionQos {
    string partition_name = 1;
    repeated string qos_list = 2;
    string default_qos = 3;
  }

  uint32 uid = 1;
  string name = 2;
  string account = 3;
  bool blocked = 4;
  repeated AllowedPartitionQos allowed_partition_qos_list = 5;
  repeated string coordinator_accounts = 6;
  AdminLevel admin_level = 7;
}

message QosInfo {
  string name = 1;
  string description = 2;
  uint32 priority = 3;
  uint32 max_jobs_per_user = 4;
  uint32 max_cpus_per_user = 5;
  uint64 max_time_limit_per_task = 6;
}

message TimeInterval {
  google.protobuf.Timestamp lower_bound = 1;
  google.protobuf.Timestamp upper_bound = 2;
}

message SystemRelInfo {
  string name = 1;
  string release = 2;
  string version = 3;
}

message CranedRemoteMeta {
  DedicatedResourceInNode dres_in_node = 1;
  SystemRelInfo sys_rel_info = 2;
  string craned_version = 3;
  google.protobuf.Timestamp craned_start_time = 4;
  google.protobuf.Timestamp system_boot_time = 5;
}
