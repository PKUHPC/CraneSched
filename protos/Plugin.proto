/**
 * Copyright (c) 2024 Peking University and Peking University
 * Changsha Institute for Computing and Digital Economy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

syntax = "proto3";

package crane.grpc.plugin; 
option go_package = "/protos";

import "PublicDefs.proto";

message StartHookRequest {
  repeated TaskInfo task_info_list = 1;
}

message StartHookReply {
  message TaskIdReply {
    bool ok = 1;
    uint32 task_id = 2;
    string failure_reason = 3;
  }

  repeated TaskIdReply result = 1;
}

message EndHookRequest {
  repeated TaskInfo task_info_list = 1;
}

message EndHookReply {
  message TaskIdReply {
    bool ok = 1;
    uint32 task_id = 2;
    string failure_reason = 3;
  }

  repeated TaskIdReply result = 1;
}

message CreateCgroupHookRequest {
  uint32 task_id = 1;
  string cgroup = 2;
  DedicatedResourceInNode resource = 3;
}

message CreateCgroupHookReply {
  bool ok = 1;
}

message DestroyCgroupHookRequest {
  uint32 task_id = 1;
  string cgroup = 2;
}

message DestroyCgroupHookReply {
  bool ok = 1;
}

service CranePluginD {
  /* ----------------------------------- Called from CraneCtld ---------------------------------------------------- */  
  rpc StartHook(StartHookRequest) returns (StartHookReply);
  rpc EndHook(EndHookRequest) returns (EndHookReply);

  /* ----------------------------------- Called from Craned ---------------------------------------------------- */
  rpc CreateCgroupHook(CreateCgroupHookRequest) returns (CreateCgroupHookReply);
  rpc DestroyCgroupHook(DestroyCgroupHookRequest) returns (DestroyCgroupHookReply);
}
